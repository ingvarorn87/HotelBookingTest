// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.0.0.0
//      SpecFlow Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace HotelBooking.UnitTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CreateBookingFeature : Xunit.IClassFixture<CreateBookingFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "SpecFlowFeature1.feature"
#line hidden
        
        public CreateBookingFeature(CreateBookingFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Create booking", "\tI want to book a room if there is any free room between the chosen dates.\r\n\tFull" +
                    "y occpuied range is between 2019,12,9 and 2019,12,15", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Start date is in fully occupied range")]
        [Xunit.TraitAttribute("FeatureTitle", "Create booking")]
        [Xunit.TraitAttribute("Description", "Start date is in fully occupied range")]
        [Xunit.TraitAttribute("Category", "SDonO")]
        public virtual void StartDateIsInFullyOccupiedRange()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Start date is in fully occupied range", null, new string[] {
                        "SDonO"});
#line 6
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
  testRunner.Given("I have entered 2019,12,10 as start date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
  testRunner.And("I have entered 2019,12,17 as end date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
  testRunner.When("I press book", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
  testRunner.Then("the result should be false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Start date is before fully occupied range, end date is in a fully occupied range")]
        [Xunit.TraitAttribute("FeatureTitle", "Create booking")]
        [Xunit.TraitAttribute("Description", "Start date is before fully occupied range, end date is in a fully occupied range")]
        [Xunit.TraitAttribute("Category", "SDinB_EDinO")]
        public virtual void StartDateIsBeforeFullyOccupiedRangeEndDateIsInAFullyOccupiedRange()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Start date is before fully occupied range, end date is in a fully occupied range", null, new string[] {
                        "SDinB_EDinO"});
#line 13
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 14
  testRunner.Given("I have entered 2019,12,8 as start date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 15
  testRunner.And("I have entered 2019,12,14 as end date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 16
  testRunner.When("I press book", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 17
  testRunner.Then("the result should be false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Start and end date is before the fully occupied range")]
        [Xunit.TraitAttribute("FeatureTitle", "Create booking")]
        [Xunit.TraitAttribute("Description", "Start and end date is before the fully occupied range")]
        [Xunit.TraitAttribute("Category", "SDinA_EDinA")]
        public virtual void StartAndEndDateIsBeforeTheFullyOccupiedRange()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Start and end date is before the fully occupied range", null, new string[] {
                        "SDinA_EDinA"});
#line 20
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 21
  testRunner.Given("I have entered 2019,12,1 as start date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 22
  testRunner.And("I have entered 2019,12,8 as end date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
  testRunner.When("I press book", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 24
  testRunner.Then("The booking should be approved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Start Date is before the fully occupied range End date is after")]
        [Xunit.TraitAttribute("FeatureTitle", "Create booking")]
        [Xunit.TraitAttribute("Description", "Start Date is before the fully occupied range End date is after")]
        [Xunit.TraitAttribute("Category", "SDinA_EDinB")]
        public virtual void StartDateIsBeforeTheFullyOccupiedRangeEndDateIsAfter()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Start Date is before the fully occupied range End date is after", null, new string[] {
                        "SDinA_EDinB"});
#line 27
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 28
  testRunner.Given("I have entered 2019,12,7 as start date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 29
  testRunner.And("I have entered 2019,12,16 as end date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
  testRunner.When("I press book", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 31
  testRunner.Then("The result should be false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Start date is before fully occupied range, end date is after fully occupied range" +
            "")]
        [Xunit.TraitAttribute("FeatureTitle", "Create booking")]
        [Xunit.TraitAttribute("Description", "Start date is before fully occupied range, end date is after fully occupied range" +
            "")]
        [Xunit.TraitAttribute("Category", "SDinB_EDinA")]
        public virtual void StartDateIsBeforeFullyOccupiedRangeEndDateIsAfterFullyOccupiedRange()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Start date is before fully occupied range, end date is after fully occupied range" +
                    "", null, new string[] {
                        "SDinB_EDinA"});
#line 34
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 35
  testRunner.Given("I have entered 2019,12,8 as start date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 36
  testRunner.And("I have entered 2019,12,17 as end date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
  testRunner.When("I press book", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 38
  testRunner.Then("the result should be false", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Start and end date is after the fully occupied range")]
        [Xunit.TraitAttribute("FeatureTitle", "Create booking")]
        [Xunit.TraitAttribute("Description", "Start and end date is after the fully occupied range")]
        [Xunit.TraitAttribute("Category", "SdinB_EDinB")]
        public virtual void StartAndEndDateIsAfterTheFullyOccupiedRange()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Start and end date is after the fully occupied range", null, new string[] {
                        "SdinB_EDinB"});
#line 41
 this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 42
  testRunner.Given("I have entered 2019,12,16 as start date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 43
  testRunner.And("I have entered 2019,12,22 as end date", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 44
  testRunner.When("I press book", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 45
  testRunner.Then("The booking should be approved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.0.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CreateBookingFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CreateBookingFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
